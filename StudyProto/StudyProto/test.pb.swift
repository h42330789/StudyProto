// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: test.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 性别
enum Gender: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 男生
  case male // = 0

  /// 女生
  case female // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .male
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .male
    case 1: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .male: return 0
    case .female: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Gender: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Gender] = [
    .male,
    .female,
  ]
}

#endif  // swift(>=4.2)

/// 客户端详情
struct ClientInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 登录时的授权token
  var token: String = String()

  /// 生成的唯一号
  var macID: String = String()

  /// 应用版本号
  var version: Int32 = 0

  /// 系统语言
  var language: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 公共的返回结果
struct CommonResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 错误码
  var errCode: Int32 = 0

  /// 错误内容
  var errMsg: String = String()

  /// 扩展字段
  var flag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 咨询列表[biz/stus/students]
struct StudentsReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 对象
  var clientInfo: ClientInfo {
    get {return _clientInfo ?? ClientInfo()}
    set {_clientInfo = newValue}
  }
  /// Returns true if `clientInfo` has been explicitly set.
  var hasClientInfo: Bool {return self._clientInfo != nil}
  /// Clears the value of `clientInfo`. Subsequent reads from it will return its default value.
  mutating func clearClientInfo() {self._clientInfo = nil}

  /// 枚举
  var gender: Gender = .male

  /// 数组
  var names: [String] = []

  /// 数字
  var grade: Int32 = 0

  var pageNum: Int32 = 0

  var pageSize: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientInfo: ClientInfo? = nil
}

/// 学生列表
struct StudentsResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 结果信息
  var commonResult: CommonResult {
    get {return _commonResult ?? CommonResult()}
    set {_commonResult = newValue}
  }
  /// Returns true if `commonResult` has been explicitly set.
  var hasCommonResult: Bool {return self._commonResult != nil}
  /// Clears the value of `commonResult`. Subsequent reads from it will return its default value.
  mutating func clearCommonResult() {self._commonResult = nil}

  /// 列表
  var students: [BaseStudent] = []

  var count: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commonResult: CommonResult? = nil
}

struct BaseStudent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 学号
  var stuID: Int64 = 0

  /// 名字
  var name: String = String()

  /// 头像
  var pic: String = String()

  /// 年龄
  var age: Int32 = 0

  /// 简介
  var desc: String = String()

  /// 性别
  var gender: Gender = .male

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Gender: @unchecked Sendable {}
extension ClientInfo: @unchecked Sendable {}
extension CommonResult: @unchecked Sendable {}
extension StudentsReq: @unchecked Sendable {}
extension StudentsResp: @unchecked Sendable {}
extension BaseStudent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Gender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Male"),
    1: .same(proto: "Female"),
  ]
}

extension ClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClientInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "macId"),
    3: .same(proto: "version"),
    4: .same(proto: "language"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.macID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.language) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if !self.macID.isEmpty {
      try visitor.visitSingularStringField(value: self.macID, fieldNumber: 2)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 3)
    }
    if self.language != 0 {
      try visitor.visitSingularInt32Field(value: self.language, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ClientInfo, rhs: ClientInfo) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.macID != rhs.macID {return false}
    if lhs.version != rhs.version {return false}
    if lhs.language != rhs.language {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommonResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CommonResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "errCode"),
    2: .same(proto: "errMsg"),
    3: .same(proto: "flag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.errCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errMsg) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.flag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errCode != 0 {
      try visitor.visitSingularInt32Field(value: self.errCode, fieldNumber: 1)
    }
    if !self.errMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errMsg, fieldNumber: 2)
    }
    if !self.flag.isEmpty {
      try visitor.visitSingularStringField(value: self.flag, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CommonResult, rhs: CommonResult) -> Bool {
    if lhs.errCode != rhs.errCode {return false}
    if lhs.errMsg != rhs.errMsg {return false}
    if lhs.flag != rhs.flag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StudentsReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StudentsReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clientInfo"),
    2: .same(proto: "gender"),
    3: .same(proto: "names"),
    4: .same(proto: "grade"),
    5: .same(proto: "pageNum"),
    6: .same(proto: "pageSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._clientInfo) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.names) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.grade) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.pageNum) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.gender != .male {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 2)
    }
    if !self.names.isEmpty {
      try visitor.visitRepeatedStringField(value: self.names, fieldNumber: 3)
    }
    if self.grade != 0 {
      try visitor.visitSingularInt32Field(value: self.grade, fieldNumber: 4)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNum, fieldNumber: 5)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StudentsReq, rhs: StudentsReq) -> Bool {
    if lhs._clientInfo != rhs._clientInfo {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.names != rhs.names {return false}
    if lhs.grade != rhs.grade {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StudentsResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StudentsResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commonResult"),
    2: .same(proto: "students"),
    3: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonResult) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.students) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commonResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.students.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.students, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StudentsResp, rhs: StudentsResp) -> Bool {
    if lhs._commonResult != rhs._commonResult {return false}
    if lhs.students != rhs.students {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BaseStudent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BaseStudent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stuId"),
    2: .same(proto: "name"),
    3: .same(proto: "pic"),
    4: .same(proto: "age"),
    5: .same(proto: "desc"),
    6: .same(proto: "gender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.stuID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pic) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.age) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stuID != 0 {
      try visitor.visitSingularInt64Field(value: self.stuID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.pic.isEmpty {
      try visitor.visitSingularStringField(value: self.pic, fieldNumber: 3)
    }
    if self.age != 0 {
      try visitor.visitSingularInt32Field(value: self.age, fieldNumber: 4)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 5)
    }
    if self.gender != .male {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BaseStudent, rhs: BaseStudent) -> Bool {
    if lhs.stuID != rhs.stuID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.pic != rhs.pic {return false}
    if lhs.age != rhs.age {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
